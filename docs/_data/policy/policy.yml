---
id: Policy
super_id: Record
description: "\nA policy is used to collect a set of records and permissions grants
  into a \nsingle scoped namespace with a common owner.\n\nThe policy can have the
  standard attributes such as `account`, `owner`, and `id`.        \nIt's also required
  to have a `body` element, which contains:\n        \n* Records which are owned by
  the policy.\n* `!permit` and `!grant` elements which apply to policy records.\n\nLike
  a user or group, a policy is a role. All the records declared in the `body` of the
  policy are \nowned by the policy role. As a result, any role to whom the policy
  role is granted inherits\nownership of everything defined in the policy. Typically,
  this is the policy owner.\n\nPolicies should be self-contained; they should avoid
  making any reference to \nrecords from outside the policy. This way, the policy
  can be loaded with different\nowner and namespace prefix options to serve different
  functions in the workflow.\nFor example, a can be loaded into the `dev` namespace
  with owner `!group developers`, \nthen a \"dev\" version of the policy is created
  with full management assigned to the `developers` group.\nIt can also be loaded
  into the `prod` namespace with owner `!group operations`, creating\na production
  version of the same policy.\n"
example: "\n- !policy\n  id: webserver\n  body:\n  - &secrets\n    - !variable ssl/private-key\n
  \n  - !layer\n    \n  - !grant\n    role: !layer\n    permissions: [ read, execute
  ]\n      resources: *secrets\n"
