---
id: Layer
super_id: Record
description: "\nHost are organized into sets called \"layers\" (sometimes known in
  some other \nsystems as \"host groups\"). Layers map logically to the groups of
  machines and\ncode in your infrastructure. For example, a group of servers or VMs
  can be a layer;\na cluster of containers which are performing the same function
  (e.g. running the same image)\ncan also be modeled as a layer. A script which is
  deployed to a server can be a layer.\nAnd an application which is deployed to a
  PaaS can also be a layer.\n\nUsing layers to model the privileges of code helps
  to separate the permissions from the\nphysical implementation of the application.
  For example, if an application is migrated from a PaaS to a \ncontainer cluster,
  the logical layers that compose the application (web servers, app servers, database
  tier,\ncache, message queue) can remain the same.\n        \n**Automatic roles**\n
  \       \nWhen a layer is created, it automatically creates three additional roles.
  The name of these\nautomatic roles are `use_host`, and `admin_host`. When a host
  is added to the layer\n(by granting the layer to the host), the layer automatically
  gives privileges on the host to the\nautomatic roles:\n\n* **use_host** gets `execute`
  privilege on the host\n* **admin_host** gets `update` privilege on the host\n        \nIf
  the host is removed from the layer, then these privileges are revoked.\n        \nAutomatic
  roles are granted using the `!automatic-role` tag, described below.\n"
example: "\n        \n- !layer prod/database\n        \n- !layer prod/app\n\n- !group
  operations\n        \n- !host db-01\n- !host app-01\n- !host app-02\n\n- !grant\n
  \ role: !layer prod/database\n  member: !host db-01\n\n- !grant\n  role: !layer
  prod/app\n  members:\n  - !host app-01\n  - !host app-02\n        \n- !grant\n  role:
  !automatic-role\n    record: !layer prod/app\n    role_name: admin_host\n  member:
  !group operations\n"
