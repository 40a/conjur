---
id: Grant
super_id: 
description: "\nGrant one role to another. When role A is granted to role B, \nthen
  role B is said to \"have\" role A. The set of all memberships of role B\nwill include
  A. The set of direct members of role A will include role B.\n    \nIf the role is
  granted with `admin` option, then the grantee (role B),\nin addition to having the
  role, can also grant and revoke the role\nto other roles.\n\nThe only limitation
  on role grants is that there cannot be any cycles\nin the role graph. For example,
  if role A is granted to role B, then role B\ncannot be granted to role A.\n\nUsers,
  groups, hosts, and layers can all behave as roles, which means they can be granted
  to and \nrevoked from each other. For example, when a Group is granted to a User,
  \nthe User gains all the privileges of the Group. (Note: \"Adding\" a User to \na
  Group is just another way to say that the Group role is granted to the User).\n\nSome
  `grant` operations have additional semantics beyond the role grant:\n    \n* When
  a Layer is granted to a Host, the automatic roles on the Layer are granted\n    privileges
  on the Host. Specifically, the `observe` role is given `read` privilege,\n    `use_host`
  is given `execute`, and `admin_host` is given `update`. The `admin`\n    option
  is ignored.\n"
example: "\n- !user alice\n  owner: !group security_admin\n\n- !group operations\n
  \ owner: !group security_admin\n    \n- !group development\n  owner: !group security_admin\n
  \ \n- !group everyone\n  owner: !group security_admin\n\n- !grant\n  role: !group
  operations\n  member: !member\n    role: !user alice\n    admin: true\n\n- !grant\n
  \ role: !group ops\n  member: !group development\n\n- !grant\n  role: !group everyone\n
  \ member: !group development\n  member: !group operations\n"
attributes:
- id: role
  kind: role
- id: member
  kind: member
- id: replace
  kind: :boolean
